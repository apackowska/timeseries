

```{r}
library(fpp3)
library(readr)
vic_elec
```

```{r}
# refuses to drop date info
vic_elec %>%
  select(Temperature)
```
```{r}
vic_elec %>%
  as.tibble() %>%
  select(Temperature)
```



```{r}
p1 <- vic_elec %>%
  filter(year(Time) == 2014) %>%
  autoplot(Demand) +
  labs(y = "GW",
       title = "Half-hourly electricity demand: Victoria")

p2 <- vic_elec %>%
  filter(year(Time) == 2014) %>%
  autoplot(Temperature) +
  labs(
    y = "Degrees Celsius",
    title = "Half-hourly temperatures: Melbourne, Australia"
  )

p1 / p2
  
```


```{r}
vic_elec %>%
  filter(year(Time) == 2014) %>%
  ggplot(aes(x = Temperature, y = Demand)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  geom_smooth(method = "loess", color = "red", se = FALSE) +
  labs(x = "Temperature (degrees Celsius)",
       y = "Electricity demand (GW)")
```
```{r}
# Compute correlation coefficient
round(cor(vic_elec$Temperature, vic_elec$Demand), 2)
```

```{r}
df <- tibble(
              x = seq(-4, 4, 0.05),
              y = x^2
            )

df %>%
  ggplot(aes(x= x, y=y)) +
  geom_point() +
  geom_smooth(method = "lm", se= FALSE)
```
```{r}
# no correlation, so no linear relationship but a perfect relationship
cor(df$x, df$y)
```
```{r}
visitors <- tourism %>%
  group_by(State) %>%
  summarise(Trips = sum(Trips))

visitors
```

```{r}

install.packages("GGally", dependencies = TRUE) # to generate a scatterplot matrix
install.packages("fma", dependencies = TRUE) # to load the Us treasury bills dataset
install.packages("patchwork", dependencies = TRUE) # Used to manage the relative location of ggplots

library(GGally)
library(fma)
library(patchwork)
```


```{r}
# turn data into wider format, the function needs that, one column for each state
```


```{r}
visitors %>%
  pivot_wider(values_from=Trips, names_from=State)
```

```{r}
visitors %>%
  pivot_wider(values_from=Trips, names_from=State) %>%
  GGally::ggpairs(columns = 2:9) + 
  theme(axis.text.x = element_text(angle = 90))
```
```{r}
soi_recruitment <- 
   read_csv(file.choose()) %>% 
   mutate(ym = yearmonth(index)) %>% 
   select(ym, SOI, recruitment) %>% 
   as_tsibble(index = ym)

# Compute desired lags
for (i in seq(1, 8)) {
  lag_name <- paste0("SOI_l", i)
  soi_recruitment[[lag_name]] = lag(soi_recruitment[["SOI"]], i)
}

# Reorder
soi_recruitment <- 
  soi_recruitment %>% 
  select(ym, recruitment, everything())
soi_recruitment
```
```{r}
# lag first is shifting one step ahead of the future
```

```{r}
# data is already in pivot wider form
soi_recruitment %>%
  GGally::ggpairs(columns = 2:11, lower = list(continuous = wrap("smooth_loess", color="lightblue"))) + 
  theme(axis.text.x = element_text(angle = 90))
```
```{r}
# changes in SOi leads the change in recruitment
```

